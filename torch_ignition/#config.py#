#!/usr/bin/env python

import torch
import torch.nn as nn
from torch.utils.data import DataLoader

from torch_ignition.logger import get_logger


class Config(object):

    # network model
    MODEL: nn.Module = None

    # loss criteria
    OPTIMIZER: torch.opt
    
    
    # data
    DATALOADER: DataLoader = None
    INPUT_SHAPE: list = [3, 224, 224]
    BATCH_SIZE: int = 1
    EPOCHS: int = 200

    
    def __init__(self):
        self.logger = get_logger(self.__class__.__name__)
    
    def display(self):
        """Display configuration values
        Prints all configuration values to the cout.
        """
        self.logger.info("\nConfigurations:")
        for a in dir(self):
            if not a.startswith("__") and not callable(getattr(self, a)) \
              and not isinstance(a, logging.logger):
                self.logger.info("{:30} {}".format(a, getattr(self, a)))
        self.logger.info("\n")

c = Config()
import IPython
IPython.embed()
